local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Bluusaken",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "BluuSaken",
   LoadingSubtitle = "by LuauIsBluu",
   ShowText = "BluuSaken", -- for mobile users to unhide rayfield, change if you'd like
   Theme = "Ocean", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   ToggleUIKeybind = "B", -- The keybind to toggle the UI visibility (string like "K" or Enum.KeyCode)

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local Forsaken = Window:CreateTab("Forsaken", 4483362458) -- Title, Image

local Section = Forsaken:CreateSection("Scripts (Keyless)")

local Button = Forsaken:CreateButton({
   Name = "Farsaken",
   Callback = function()

if getgenv then
    getgenv().DebugNotifications = "false"
    getgenv().TrackMePlease = "true"
end

loadstring(game:HttpGet("https://raw.githubusercontent.com/ivannetta/ShitScripts/main/forsaken.lua"))()

   end,
})

local Button = Forsaken:CreateButton({
   Name = "Nolsaken",
   Callback = function()
  loadstring(game:HttpGet("https://raw.githubusercontent.com/Syndromehsh/-/refs/heads/ISIS-%E8%A2%AB%E9%81%97%E5%BC%83/%E4%B8%8D%E8%A6%81%E5%91%8A%E8%AF%89%E4%BB%BB%E4%BD%95%E4%BA%BA%E5%93%9F%5B/%E5%B8%8C%E7%9A%AE%E7%AC%91%E8%84%B8%5D"))()
   end,
})

local Button = Forsaken:CreateButton({
   Name = "Kryonion",
   Callback = function()
  loadstring(game:HttpGet("https://raw.githubusercontent.com/ehrerlikesteto/KryOnionrep/refs/heads/main/OnionIsForsaken"))()
   end,
})

local Button = Forsaken:CreateButton({
   Name = "Nullsaken V8",
   Callback = function()
   
loadstring(game:HttpGet("https://raw.githubusercontent.com/wefwef127382/forsakenloader.github.io/refs/heads/main/RINGTABUBLIK.lua"))()
   end,
})

local Button = Forsaken:CreateButton({
   Name = "SigmaSaken",
   Callback = function()

loadstring(game:HttpGet("https://raw.githubusercontent.com/sigmaboy-sigma-boy/Sigmasaken/refs/heads/main/sigmasakenmain"))()
   end,
})

local Button = Forsaken:CreateButton({
   Name = "Voidsaken",
   Callback = function()

loadstring(game:HttpGet("https://raw.githubusercontent.com/voidsaken-script/Voidsaken-Loader/refs/heads/main/main"))()
   end,
})

local Section = Forsaken:CreateSection("Random stuff dude")

local Button = Forsaken:CreateButton({
   Name = "FrontFlip",
   Callback = function()

loadstring(game:HttpGet("https://raw.githubusercontent.com/SHRTRYScriptMANhere/stolenahhfrotflip/refs/heads/main/Flip",true))()
   end,
})

local Button = Forsaken:CreateButton({
   Name = "Device Spoofer",
   Callback = function()

local UserInputService = game:GetService("UserInputService")
local Network = require(game.ReplicatedStorage.Modules.Network)

local DeviceSpoof = {}
local ForcedDevice = "Console" -- change to "Mobile", "Console" or "PC"

DeviceSpoof.Changed = Instance.new("BindableEvent").Event
DeviceSpoof.Value = ForcedDevice

local function ApplySpoof()
    DeviceSpoof.Value = ForcedDevice
    Network:FireServerConnection("SetDevice", "REMOTE_EVENT", ForcedDevice)
end

ApplySpoof()

UserInputService.LastInputTypeChanged:Connect(ApplySpoof)

while wait() do
    ApplySpoof()
end

return DeviceSpoof
   end,
})

local Button = Forsaken:CreateButton({
   Name = "Fake block",
   Callback = function()
   
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = player:WaitForChild("PlayerGui")
screenGui.ResetOnSpawn = false

local currentKey = nil

local function setupCharacter(character)
    local humanoid = character:WaitForChild("Humanoid")
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://72722244508749"
    local animator = humanoid:FindFirstChildOfClass("Animator") or Instance.new("Animator", humanoid)
    local animTrack = animator:LoadAnimation(animation)

    screenGui:ClearAllChildren()

    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 200, 0, 100)
    frame.Position = UDim2.new(0.5, -100, 0.5, -50)
    frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    frame.BorderSizePixel = 0
    frame.Parent = screenGui
    frame.Active = true
    frame.Draggable = true

    local playBtn = Instance.new("TextButton")
    playBtn.Size = UDim2.new(0, 180, 0, 40)
    playBtn.Position = UDim2.new(0, 10, 0, 10)
    playBtn.Text = "Play Animation"
    playBtn.BackgroundColor3 = Color3.fromRGB(70, 130, 180)
    playBtn.TextColor3 = Color3.new(1, 1, 1)
    playBtn.Parent = frame

    playBtn.MouseButton1Click:Connect(function()
        animTrack:Play()
    end)

    local keybindBtn = Instance.new("TextButton")
    keybindBtn.Size = UDim2.new(0, 180, 0, 40)
    keybindBtn.Position = UDim2.new(0, 10, 0, 50)
    keybindBtn.Text = currentKey and ("Set Keybind (Current: " .. tostring(currentKey) .. ")") or "Set Keybind (Current: none)"
    keybindBtn.BackgroundColor3 = Color3.fromRGB(100, 50, 150)
    keybindBtn.TextColor3 = Color3.new(1, 1, 1)
    keybindBtn.TextScaled = true
    keybindBtn.Parent = frame

    local waitingForKey = false

    keybindBtn.MouseButton1Click:Connect(function()
        keybindBtn.Text = "Press a key..."
        waitingForKey = true
    end)

    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if waitingForKey and input.UserInputType == Enum.UserInputType.Keyboard then
            currentKey = input.KeyCode
            keybindBtn.Text = "Set Keybind (Current: " .. tostring(currentKey) .. ")"
            waitingForKey = false
        elseif currentKey and input.KeyCode == currentKey and not gameProcessed then
            animTrack:Play()
        end
    end)
end

if player.Character then
    setupCharacter(player.Character)
end

player.CharacterAdded:Connect(function(char)
    setupCharacter(char)
end)

   end,
})

local Section = Forsaken:CreateSection("Survivor tptool")

local survivorsFolderPath = {"Players", "Survivors"} -- workspace.Players.Survivors
local survivorsFolder = workspace
for _, name in ipairs(survivorsFolderPath) do
    survivorsFolder = survivorsFolder:FindFirstChild(name)
    if not survivorsFolder then break end
end

-- Function to get all survivor names dynamically
local function getSurvivorNames()
    local names = {}
    if survivorsFolder then
        for _, obj in ipairs(survivorsFolder:GetChildren()) do
            if obj:IsA("Model") then
                table.insert(names, obj.Name)
            end
        end
    end
    return names
end

--// Store selected survivor
local selectedSurvivor = nil

--// Dropdown
local Dropdown = Forsaken:CreateDropdown({
    Name = "Select Survivor",
    Options = getSurvivorNames(),
    CurrentOption = nil,
    MultipleOptions = false,
    Callback = function(Value)
        selectedSurvivor = Value
        Rayfield:Notify({
            Title = "Survivor Selected",
            Content = "Chosen: " .. tostring(Value),
            Duration = 3
        })
    end,
})

--// Refresh Button (if survivors spawn/despawn)
local RefreshButton = Forsaken:CreateButton({
    Name = "Refresh Survivor List",
    Callback = function()
        local updated = getSurvivorNames()
        Dropdown:SetOptions(updated)
        Rayfield:Notify({
            Title = "Refreshed",
            Content = "Updated survivor list loaded.",
            Duration = 3
        })
    end,
})

--// Give TP Tool Button
local Button = Forsaken:CreateButton({
    Name = "Give TP Tool",
    Callback = function()
        local player = game.Players.LocalPlayer
        local mouse = player:GetMouse()

        if not selectedSurvivor then
            Rayfield:Notify({
                Title = "Error",
                Content = "Select a survivor first!",
                Duration = 3
            })
            return
        end

        if not survivorsFolder then
            Rayfield:Notify({
                Title = "Error",
                Content = "Couldn't find survivors folder in Workspace!",
                Duration = 3
            })
            return
        end

        local survivor = survivorsFolder:FindFirstChild(selectedSurvivor)
        if not survivor then
            Rayfield:Notify({
                Title = "Error",
                Content = "Survivor '" .. selectedSurvivor .. "' not found.",
                Duration = 3
            })
            return
        end

        -- Create teleport tool
        local tool = Instance.new("Tool")
        tool.RequiresHandle = false
        tool.Name = "[TP Tool]"

        tool.Activated:Connect(function()
            local pos = mouse.Hit.p + Vector3.new(0, 2.5, 0)
            player.Character.HumanoidRootPart.CFrame = CFrame.new(pos)
        end)

        tool.Parent = survivor

        Rayfield:Notify({
            Title = "Success",
            Content = "Gave TP Tool to " .. selectedSurvivor,
            Duration = 3
        })
    end,
})
